// src/App.jsx
import React, { Suspense, useEffect } from "react";
import { Routes, Route, Navigate, useNavigate, useLocation } from "react-router-dom";
import { useAuthStore } from "./store/auth.js";
import { hydrateIfEmpty } from "./store/data.js";

// Components
import AppNav from "./components/AppNav.jsx";
import Protected from "./components/Protected.jsx";
import PermissionGuard from "./components/PermissionGuard.jsx";

// Pages
import Home from "./pages/public/Home.jsx";
import Menu from "./pages/public/Menu.jsx";
import News from "./pages/public/News.jsx";
import Login from "./pages/Login.jsx";

// Staff Pages
import Billing from "./pages/staff/Billing.jsx";
import Orders from "./pages/staff/Orders.jsx";
import WorkflowPOS from "./pages/staff/WorkflowPOS.jsx";

// Admin Pages
import AdminLayout from "./pages/admin/AdminLayout.jsx";
import AdminDashboard from "./pages/admin/Dashboard.jsx";
import Users from "./pages/admin/Users.jsx";
import Products from "./pages/admin/Products.jsx";
import Permissions from "./pages/admin/Permissions.jsx";
import Announcements from "./pages/admin/Announcements.jsx";
import Payments from "./pages/admin/Payments.jsx";

import "./styles.css";
import styles from "./App.module.css";

hydrateIfEmpty();

// Helper component for page breadcrumb
function PageBreadcrumb() {
  const location = useLocation();
  const { user } = useAuthStore();
  
  const getBreadcrumbPath = () => {
    const path = location.pathname;
    if (path === '/') return '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å';
    if (path === '/menu') return '‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
    if (path === '/news') return '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£';
    if (path === '/login') return '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
    if (path.startsWith('/staff')) {
      if (path === '/staff/pos') return 'Staff ‚Ä∫ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ Workflow)';
      if (path === '/staff/detect') return 'Staff ‚Ä∫ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö AI (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ Workflow)';
      if (path === '/staff/billing') return 'Staff ‚Ä∫ ‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•';
      if (path === '/staff/orders') return 'Staff ‚Ä∫ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠';
      if (path === '/staff/workflow') return 'Staff ‚Ä∫ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£';
    }
    if (path.startsWith('/admin')) {
      if (path === '/admin') return 'Admin ‚Ä∫ ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î';
      if (path === '/admin/users') return 'Admin ‚Ä∫ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
      if (path === '/admin/products') return 'Admin ‚Ä∫ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
      if (path === '/admin/permissions') return 'Admin ‚Ä∫ ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      if (path === '/admin/announcements') return 'Admin ‚Ä∫ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®';
      if (path === '/admin/payments') return 'Admin ‚Ä∫ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
    }
    return path;
  };

  const isHomePage = location.pathname === '/';
  
  // Don't show breadcrumb on home page since Home.jsx handles its own hero section
  if (isHomePage) {
    return null;
  }

  return (
    <nav className={styles.breadcrumb}>
      <div className={styles.breadcrumbContent}>
        <span className={styles.breadcrumbHome}>üè†</span>
        <span className={styles.breadcrumbSeparator}>‚Ä∫</span>
        <span className={`${styles.breadcrumbItem} ${styles.active}`}>
          {getBreadcrumbPath()}
        </span>
      </div>
    </nav>
  );
}

// Loading component
function LoadingSpinner({ message = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...", subtext = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..." }) {
  return (
    <div className={styles.loadingContainer}>
      <div className={styles.loadingAnimation}>
        <div className={styles.loadingSpinner}></div>
        <div className={styles.loadingDots}>
          <span></span>
          <span></span>
          <span></span>
        </div>
      </div>
      <div className={styles.loadingContent}>
        <div className={styles.loadingText}>{message}</div>
        <div className={styles.loadingSubtext}>{subtext}</div>
      </div>
    </div>
  );
}

// Error boundary component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('App Error Boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <ErrorFallback 
          error={this.state.error}
          resetError={() => this.setState({ hasError: false, error: null })}
        />
      );
    }

    return this.props.children;
  }
}

// Error fallback component
function ErrorFallback({ error, resetError }) {
  return (
    <div className={styles.errorContainer}>
      <div className={styles.errorContent}>
        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
        <h2 className={styles.errorTitle}>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
        <p className={styles.errorMessage}>
          {error?.message || '‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}
        </p>
        <div className={styles.errorActions}>
          <button className={styles.errorButton} onClick={resetError}>
            <span>üîÑ</span>
            <span>‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</span>
          </button>
          <button 
            className={styles.errorButtonSecondary} 
            onClick={() => window.location.href = '/'}
          >
            <span>üè†</span>
            <span>‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</span>
          </button>
        </div>
      </div>
    </div>
  );
}

// Helper component for role-based redirects
function RoleBasedRedirect() {
  const { user, isLoading } = useAuthStore();
  const navigate = useNavigate();

  console.log('üîÄ RoleBasedRedirect - user:', user?.username, 'role:', user?.role, 'isLoading:', isLoading);

  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (isLoading) {
      console.log('‚è≥ Still loading, waiting...');
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡πÉ‡∏´‡πâ redirect ‡∏ï‡∏≤‡∏° role
    if (user) {
      const redirectPath = user.role === "STAFF" ? "/staff/workflow" : "/admin";
      console.log('üéØ User found, redirecting to:', redirectPath);
      navigate(redirectPath, { replace: true });
    } else {
      console.log('üë§ No user found, staying on home page');
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home
  }, [user, isLoading, navigate]);

  // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏´‡∏£‡∏∑‡∏≠ Home
  if (isLoading) {
    return (
      <LoadingSpinner 
        message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå..." 
        subtext="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
      />
    );
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home
  if (!user) {
    return <Home />;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà redirect ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á loading
  return (
    <LoadingSpinner 
      message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤..." 
      subtext="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
    />
  );
}

function App() {
  const { user, isLoading: authLoading } = useAuthStore();
  const location = useLocation();
  
  console.log('üè† App component - user:', user?.username, 'authLoading:', authLoading, 'path:', location.pathname);
  
  // Show loading spinner while initializing
  if (authLoading) {
    return (
      <div className={styles.appContainer}>
        <AppNav />
        <main className={styles.mainContent}>
          <div className={styles.contentWrapper}>
            <div className={styles.pageContent}>
              <LoadingSpinner 
                message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏°‡πà‡∏≤‡∏•‡πà‡∏≤..." 
                subtext="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö"
              />
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <div className={styles.appContainer}>
        <AppNav />
        <main className={styles.mainContent}>
          <div className={styles.contentWrapper}>
            <div className={styles.pageContent}>
              <PageBreadcrumb />
              <div className={styles.routeContent}>
                <Suspense fallback={
                  <LoadingSpinner 
                    message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤..." 
                    subtext="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
                  />
                }>
                  <Routes>
                    {/* Public Routes */}
                    <Route path="/" element={<RoleBasedRedirect />} />
                    <Route path="/menu" element={<Menu />} />
                    <Route path="/news" element={<News />} />
                    <Route path="/login" element={<Login />} />

                   // src/App.jsx (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)

                    {/* Staff Routes */}
                    <Route
                      path="/staff/billing"
                      element={
                        <Protected roles={["STAFF", "ADMIN"]}>
                          <PermissionGuard permission="pos">
                            <Billing />
                          </PermissionGuard>
                        </Protected>
                      }
                    />

                    <Route
                      path="/staff/orders"
                      element={
                        <Protected roles={["STAFF", "ADMIN"]}>
                          <PermissionGuard permission="pos">
                            <Orders />
                          </PermissionGuard>
                        </Protected>
                      }
                    />

                    <Route
                      path="/staff/workflow"
                      element={
                        <Protected roles={["STAFF", "ADMIN"]}>
                          <PermissionGuard permission="pos">
                            <WorkflowPOS />
                          </PermissionGuard>
                        </Protected>
                      }
                    />

                    {/* Admin Routes (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏ï‡∏≤‡∏° permission) */}
                    <Route
                      path="/admin"
                      element={
                        <Protected roles={["ADMIN", "STAFF"]}>
                          <AdminLayout />
                        </Protected>
                      }
                    >
                      <Route index element={<AdminDashboard />} />

                      <Route
                        path="users"
                        element={
                          <PermissionGuard permission="users">
                            <Users />
                          </PermissionGuard>
                        }
                      />

                      <Route
                        path="products"
                        element={
                          <PermissionGuard permission="products">
                            <Products />
                          </PermissionGuard>
                        }
                      />

                      <Route
                        path="permissions"
                        element={
                          <PermissionGuard permission="users">
                            <Permissions />
                          </PermissionGuard>
                        }
                      />

                      <Route
                        path="announcements"
                        element={
                          <PermissionGuard permission="announcements">
                            <Announcements />
                          </PermissionGuard>
                        }
                      />

                      <Route
                        path="payments"
                        element={
                          <PermissionGuard permission="reports">
                            <Payments />
                          </PermissionGuard>
                        }
                      />
                    </Route>


                    {/* 404 Fallback */}
                    <Route 
                      path="*" 
                      element={
                        <ErrorFallback 
                          error={{ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤ (404)' }}
                          resetError={() => window.location.href = '/'}
                        />
                      } 
                    />
                  </Routes>
                </Suspense>
              </div>
            </div>
          </div>
        </main>
      </div>
    </ErrorBoundary>
  );
}

export default App;
